#!/sbin/sh
# Kali NetHunter Remove

## start build generated variables
supersu=
## end build generated variables

if [ "$3" ]; then
	zip=$3
	console=/proc/$$/fd/$2
	# write the location of the console buffer to /tmp/console for other scripts to use
	echo "$console" > /tmp/console
else
	console=$(cat /tmp/console)
	[ "$console" ] || console=/proc/$$/fd/1
fi

tmp=/tmp/nethunter
patchtmp=$tmp/boot-patcher
sutmp=/tmp/supersu

progress() {
	echo "set_progress $1" > "$console"
}

print() {
	echo "ui_print ${1:- }" > "$console"
	echo
}

abort() {
	[ "$1" ] && {
		print "Error: $1"
		print "Aborting..."
	}
	cleanup
	print "Failed to install Kali NetHunter!"
	exit 1
}

cleanup() {
	rm /system/.rw
	rm /data/.rw

	umount /system

	[ "$zip" ] && rm /tmp/console
}

install() {
	setperm "$2" "$3" "$tmp$1"
	if [ "$4" ]; then
		cp -r "$tmp$1" "$(dirname "$4")/"
		return
	fi
	cp -r "$tmp$1" "$(dirname "$1")/"
}

# installapp "App Name" "appfile.apk" "play.store.package.name"
# -> if the app package is found in the play store app database, then don't install it
installapp() {
	installto=/data/app/
	if [ "$3" ]; then
		for appdir in "/data/app/$3"*; do
			[ -d "$appdir" ] || continue
			echo "Found app directory: $appdir"
			if [ ! -f /data/data/com.android.vending/databases/localappstate.db ]; then
				echo "Could not find Play Store app database!"
			# this should also catch paid/alternative versions if they are suffixed
			elif strings /data/data/com.android.vending/databases/localappstate.db | grep -q "^$3"; then
				rm -f "/data/app/$2"
				print "- Found Play Store installed $1"
				return 0
			fi
			rm -f "/data/app/$2"
			installto=$appdir/base.apk
			break
		done
	fi
	echo "Installing $1 to $installto"
	print "- Installing $1"
	cp -f "$tmp/data/app/$2" "$installto" && return 0
	print "- Failed to install $1!" && return 1
}

extract() {
	rm -rf "$2"
	mkdir -p "$2"
	unzip -o "$1" -d "$2" -x "$3" ||
		abort "Unable to extract! The zip may be corrupt or your device may not have enough RAM to proceed. Consider using a smaller installer if it is available."
}

setperm() {
	find "$3" -type d -exec chmod "$1" {} \;
	find "$3" -type f -exec chmod "$2" {} \;
}

symlink() {
	rm "$2"
	ln -s "$1" "$2"
}

mount() {
	mountpoint -q "$1" || /sbin/busybox mount -o rw "$1" || abort "Unable to mount $1 as rw!"
	>> "$1/.rw" && return || /sbin/busybox mount -o remount,rw "$1"
	>> "$1/.rw" && return || abort "Unable to write to $1!"
}

print "##################################################"
print "##################################################"
print "##                                              ##"
print "##  88      a8P         db        88        88  ##"
print "##  88    .88'         d88b       88        88  ##"
print "##  88   88'          d8''8b      88        88  ##"
print "##  88 d88           d8'  '8b     88        88  ##"
print "##  8888'88.        d8YaaaaY8b    88        88  ##"
print "##  88P   Y8b      d8''''''''8b   88        88  ##"
print "##  88     '88.   d8'        '8b  88        88  ##"
print "##  88       Y8b d8'          '8b 888888888 88  ##"
print "##                                              ##"
print "###################Auto Remove####################"
print "################### NetHunter ####################"


print "Checking and Remove for previous versions of NetHunter"
sh tools/prevremove.sh

progress 0.9

print "Running Kali chroot Remove..."
sh tools/removechroot.sh "$zip"

cleanup
print "************************************************"
print "*       Kali NetHunter is now Remove!          *"
print "*   Don't forget to start the NetHunter app    *"
print "*       to finish setting everything up!       *"
print "************************************************"
progress 1.0
